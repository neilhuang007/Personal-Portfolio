{
  "projects": [
    {
      "id": "openyolbi",
      "title": "OpenYolBi - Minecraft Hot Injection Framework",
      "category": "gaming",
      "subcategories": ["security", "minecraft-tools", "injection-framework", "game-modding"],
      "time": "2024-11",
      "timeDisplay": "November 2024",
      "description": "Lightweight hot injection framework supporting injection into Minecraft 1.8.9, 1.12.2, 1.18.1 vanilla forge mcp or clients with partially unobfuscated code",
      "tech": ["Java", "Rust", "C++", "ASM", "XML"],
      "github": "https://github.com/yapeteam/OpenYolBi",
      "demo": "https://yapeteam.github.io/",
      "featured": true,
      "content": "## OpenYolBi - Advanced Minecraft Injection Framework\n\nOpenYolBi is a sophisticated hot injection framework designed for Minecraft client modification and enhancement. The project represents the evolution of the YolBi series, offering advanced capabilities for developers and users.\n\n### Key Features\n\n- **Multi-Version Support**: Compatible with Minecraft versions 1.8.9, 1.12.2, and 1.18.1\n- **Client Compatibility**: Works with vanilla, Forge, MCP, and partially unobfuscated clients like Lunar\n- **Anti-Cheat Bypasses**: Includes bypasses for Vulcan, Spartan, AGC, NCP, and GrimAC\n- **Visual Improvements**: Enhanced graphics and rendering capabilities\n- **Custom Build System**: Uses YBuild.xml for flexible configuration\n\n### Technical Architecture\n\n- **ASM Integration**: Advanced bytecode manipulation for runtime injection\n- **Reflective DLL Injection**: Sophisticated injection mechanisms\n- **Rust Injector**: Rebuilt injector component in Rust for improved performance\n- **Modular Design**: Clean separation of concerns for maintainability\n\n### Community\n\n- **Active Development**: 59 stars, 16 forks\n- **Discord Server**: https://discord.gg/7SyrPcreJw\n- **QQ Group**: 699481681\n- **License**: GPL with custom YolBi License\n\n### Development Status\n\nActively maintained with recent releases and continuous improvements. The project has migrated from the older YolBi_Lite_Recode repository to this modern implementation."
    },
    {
      "id": "yolbi-lite-recode",
      "title": "YolBi Lite Recode (Archived)",
      "category": "gaming",
      "subcategories": ["security", "minecraft-tools", "injection-framework", "archived"],
      "time": "2024-01",
      "timeDisplay": "January 2024",
      "description": "Legacy hot injection framework for Minecraft, now migrated to OpenYolBi",
      "tech": ["Java", "C++", "MinGW-W64"],
      "github": "https://github.com/yapeteam/YolBi_Lite_Recode",
      "demo": "",
      "featured": false,
      "content": "## YolBi Lite Recode - Legacy Injection Framework\n\n**Status: ARCHIVED - Development has moved to OpenYolBi**\n\nYolBi Lite Recode was the predecessor to OpenYolBi, serving as a hot injection framework for Minecraft clients. This repository is now archived and read-only.\n\n### Historical Features\n\n- **Legit Modules**: TellyBridge, KillAura, AimAssist\n- **Modifier Support**: Extensive customization options\n- **Bypass Mechanisms**: Various anti-cheat circumvention methods\n- **Custom Build System**: YBuild.xml configuration\n\n### Technical Stack\n\n- **C Compiler**: MinGW-W64 x86_64-ucrt-posix-seh 11.2.0\n- **Primary Language**: Java\n- **Build System**: Custom XML-based configuration\n\n### Migration Notice\n\nAll active development has been migrated to the OpenYolBi repository. Users and developers should refer to the new repository for the latest features and updates.\n\n### Statistics\n\n- 8 stars\n- 0 forks\n- Public archive (read-only)"
    },
    {
      "id": "minecraft-1-8-9-lwjgl3",
      "title": "Minecraft 1.8.9 LWJGL3 Port",
      "category": "gaming",
      "subcategories": ["tools", "minecraft-modding", "lwjgl", "mcp"],
      "time": "2024-01",
      "timeDisplay": "January 2024",
      "description": "MCP 1.8.9 converted to use LWJGL3 for improved performance and compatibility",
      "tech": ["Java", "LWJGL3", "MCP"],
      "github": "https://github.com/yapeteam/Minecraft-1.8.9-lwjgl3",
      "demo": "",
      "featured": false,
      "content": "## Minecraft 1.8.9 LWJGL3 Port\n\nThis project ports Minecraft 1.8.9 MCP (Mod Coder Pack) to use LWJGL3 (Lightweight Java Game Library version 3), bringing modern OpenGL capabilities and improved performance to the older Minecraft version.\n\n### Technical Details\n\n- **Base Version**: Minecraft 1.8.9 MCP\n- **Library Upgrade**: LWJGL 2.x â†’ LWJGL 3.x\n- **Primary Language**: Java\n\n### Implementation\n\nThe project incorporates code from:\n- GTNewHorizons/lwjgl3ify\n- Verschwiegener/MCLWJGL3\n\n### Known Issues\n\n- Cannot set window icon (LWJGL3 limitation)\n- Other minor compatibility issues may exist\n\n### Benefits of LWJGL3\n\n- Modern OpenGL support\n- Better performance\n- Improved window management\n- Enhanced input handling\n- Better cross-platform compatibility\n\n### Contact\n\nFor bug fixes and issues, contact the developer at: zqq2333@outlook.com\n\n### Purpose\n\nThis project enables developers and modders to work with Minecraft 1.8.9 using modern graphics libraries, facilitating better mod development and client modifications."
    },
    {
      "id": "yapeteam-github-io",
      "title": "YapeTeam Official Website",
      "category": "other",
      "subcategories": ["github-pages", "website"],
      "time": "2024-01",
      "timeDisplay": "January 2024",
      "description": "GitHub Pages repository hosting the official YolBi website",
      "tech": ["HTML", "CSS", "JavaScript", "GitHub Pages"],
      "github": "https://github.com/yapeteam/yapeteam.github.io",
      "demo": "https://yapeteam.github.io/",
      "featured": false,
      "content": "## YapeTeam Official Website\n\nThis repository hosts the official website for the YapeTeam organization and their YolBi projects.\n\n### Purpose\n\n- **Project Documentation**: Central hub for YolBi documentation\n- **Community Portal**: Links to Discord and other community resources\n- **Download Center**: Official releases and downloads\n- **News and Updates**: Latest project announcements\n\n### Technical Implementation\n\n- **Hosting**: GitHub Pages\n- **URL**: https://yapeteam.github.io/\n- **Status**: Active and maintained\n\n### Content\n\nThe website serves as the primary online presence for the YapeTeam organization, providing information about their Minecraft injection frameworks and related tools."
    },
    {
      "id": "novoline-buidable",
      "title": "Novoline Buildable",
      "category": "gaming",
      "subcategories": ["minecraft", "minecraft-client", "game-modification", "utility-mod"],
      "time": "2024-01",
      "timeDisplay": "January 2024",
      "description": "Novoline source and imports fixed and running - Minecraft utility modification/client",
      "tech": ["Java", "Minecraft Modding Framework"],
      "github": "https://github.com/neilhuang007/Novoline-Buidable",
      "demo": "",
      "featured": false,
      "content": "## Novoline Buildable - Minecraft Client Modification\n\nA fork or continuation of the Novoline Minecraft client project, focusing on fixing source code and import issues to create a buildable version.\n\n### Project Overview\n\n- **Repository Name**: Novoline-Buidable\n- **Type**: Minecraft utility modification/client\n- **Focus**: Source code fixes and import corrections\n- **Language**: Java\n\n### Technical Details\n\n- **Framework**: Minecraft modding/client development\n- **Base**: Novoline client architecture\n- **Compatibility**: Minecraft Java Edition\n- **Requirements**: Java Development Kit (JDK)\n\n### Repository Statistics\n\n- **Stars**: 0\n- **Forks**: 1\n- **Contributors**: 1 (owner)\n- **Status**: Active repository\n\n### Purpose\n\nThis repository appears to be focused on maintaining a working, buildable version of the Novoline client, addressing compilation issues and ensuring the code can be successfully built and run.\n\n### Documentation\n\n- Minimal README with basic description\n- Limited technical documentation\n- Focus on practical implementation rather than extensive documentation"
    },
    {
      "id": "aeternus-argus",
      "title": "Aeternus Argus - AI Network Security",
      "category": "ai-ml",
      "subcategories": ["cybersecurity", "network-security", "machine-learning", "vpn-detection", "ddos-protection"],
      "time": "2024-01",
      "timeDisplay": "January 2024",
      "description": "A proof of concept AI identification of malicious network requests and DDoS attacks using XGBoost",
      "tech": ["Python", "XGBoost", "scikit-learn", "pandas", "numpy", "Optuna", "matplotlib", "seaborn"],
      "github": "https://github.com/neilhuang007/Aeternus-Argus",
      "demo": "",
      "featured": true,
      "content": "## Aeternus Argus - AI-Powered Network Security\n\nA sophisticated proof-of-concept system for identifying malicious network requests and DDoS attacks using advanced machine learning techniques.\n\n### Project Overview\n\n- **Purpose**: AI-powered identification of malicious network traffic\n- **Focus**: VPN vs Non-VPN traffic classification\n- **Methodology**: XGBoost-based classification with advanced feature engineering\n- **Best Accuracy**: 90.94% after threshold optimization\n\n### Technical Implementation\n\n#### Machine Learning Architecture\n\n- **Primary Model**: XGBoost (Extreme Gradient Boosting)\n- **Optimization**: Optuna for hyperparameter tuning\n- **Cross-validation**: Stratified K-Fold implementation\n- **Feature Selection**: Automated feature importance analysis\n\n#### Feature Engineering\n\nThe system analyzes 21 network flow features including:\n\n- **Packet Inter-arrival Times**: min_fiat, max_fiat, mean_fiat\n- **Byte Inter-arrival Times**: min_biat, max_biat, mean_biat\n- **Flow Inter-arrival Times**: min_flowiat, max_flowiat, mean_flowiat, std_flowiat\n- **Activity Patterns**: min_active, mean_active, max_active, std_active\n- **Idle Time Patterns**: min_idle, mean_idle, max_idle, std_idle\n- **Flow Statistics**: flowPktsPerSecond, flowBytesPerSecond, duration\n\n### Project Structure\n\n- **SetupData.py**: Dataset download and preprocessing\n- **Train.py**: Model training with hyperparameter optimization\n- **GenerateTrainingData.py**: Custom data processing from pcap files\n- **requirements.txt**: Dependency management\n\n### Research Foundation\n\nExtensive literature review with references to academic papers on:\n- CNN-based VPN traffic classification\n- Deep Packet analysis with autoencoders\n- Graph Attention Networks for VPN detection\n- Artificial Neural Networks for VPN classification\n- Random Forest-based approaches\n- ET-BERT for encrypted traffic classification\n\n### Performance Metrics\n\n- **Baseline Accuracy**: ~88%\n- **Optimized Accuracy**: 90.94%\n- **Improvement**: 2% through threshold optimization\n- **Dataset**: VPN-nonVPN with scenarios A1, A2, B\n\n### Visualization Capabilities\n\n- eCDF plots for feature distribution\n- Correlation heatmaps\n- Feature importance visualization\n- Model performance metrics\n\n### Academic Quality\n\n- 7+ peer-reviewed papers cited\n- Rigorous machine learning methodology\n- Comprehensive technical documentation\n- Clear reproducibility instructions\n\n### Future Applications\n\n- Real-time network monitoring\n- DDoS attack prevention\n- VPN traffic analysis\n- Network anomaly detection\n- Security policy enforcement"
    }
  ]
}